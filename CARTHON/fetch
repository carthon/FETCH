#!/bin/bash

##Uso del programa y salida
function UsageAndExit
{
	echo "Usage: fetch <dir> <opseleccion> <criterioselec> <accion>"
	exit 0
}

##Funcion de Error
## Argumento1: Codigo del Error
## Argumento2: Descripción del Error
function ShowError
{
	echo "$0: Error($1) $2"
}

##Funcion de impresion segun el formato dado
## Argumento1: Imprime el fichero con el formato especificado
## SinArgumento: Imprime los ficheros almacenados en el arrayFicheros
function DoPrint
{
	##Si se encuentra en el directorio actual cambia el formato de impresión
	if [[ $# -eq 1 ]]; then
		if [[ "$path" == "$PWD" ]]; then 				
				printf './%s\n' "$1"
			else
				printf '%s/%s\n' "$path" "$1"
			fi

	else
		for fichero in "${arrayFicheros[@]}"; do
			if [[ "$path" == "$PWD" ]]; then 				
				printf './%s\n' "$fichero"
			else
				printf '%s/%s\n' "$path" "$fichero"
			fi
		done
	fi
}

##Si el programa supera o es menor a los 4 argumentos muestra el modo de uso y sale
if [[ $# -lt 4 ]]; then
	UsageAndExit
fi
##Recopilación de Argumentos en variables
path="$1"
shift
condicionselec="$1"
shift
criterioselec="$1"
shift
accion="$1"
shift
pipe=()
for i in $@; do
	pipe+=(" ")
	pipe+=($i)
	shift
done
arrayFicheros=()

##Ejecuta la acción escrita en el ultimo argumento
## Argumento1: Nombre del archivo.
function DoAction
{	
	case $accion in
		-print) 
			DoPrint
			;;
		-pipe)
			##Si existe el comando indicado en el primer argumento del pipe, ejecuta el comando, sino muestra error.
			if hash ${pipe[1]} 2>/dev/null; then
				##Traslada la información extraida archivo a archivo al mandato en pipe y lo imprime.
				${pipe[@]} <(for f in "${arrayFicheros[@]}"; do DoPrint $f; done)
			else
 			 	ShowError 4 "No se puede ejecutar el comando"
			fi
			;;
		-exec)
			##Lanza un proceso por cada uno de los archivos que cumplan el criterio de seleccion e imprime el resultado de dichos procesos
			if hash ${pipe[1]} 2>/dev/null; then 
			 	for f in "${arrayFicheros[@]}"; do
					(
						printf '%s ' "$(${pipe[@]} < $path/$f)"
						DoPrint $f
					)				
				done
			else
				ShowError 4 "No se puede ejecutar el comando"
			fi
			;;
		*) 
			##Si no hay un argumento válido lanza el siguiente error.
			ShowError 1 "Opción no válida."
			;;
	esac
}

##Comprobamos si existe el directorio pasado
if [ ! -r $path ]; then
	ShowError 2 "No se puede leer el directorio."
	exit 1
fi

##Iniciamos un bucle que compruebe todos los archivos en el path dado.
for file in $(ls $path);
do
	case $condicionselec in
		-t)
			case $criterioselec in
				f) 
					##Si el archivo es un archivo regular pasa el archivo
					if [[ -f $path/$file ]]; then
						arrayFicheros+=($file)
					fi
					;;
				d) 
					##Si el archivo es un directorio, pasa el archivo
					if [[ -d $path/$file ]]; then
						arrayFicheros+=($file)
					fi
					;;
				*) 
					ShowError 1 "Opción no válida."
					;;
			esac
			;;
	
		-n)
			##Si el nombre del archivo contiene alguno de los caracteres indicados, ejecuta una acción
			if [[ "$file" == *"$criterioselec"* ]]; then
				arrayFicheros+=($file)
			fi
			;;
		-p)	
			##Si los permisos del archivo (stat -c %A - Legibles en lenguaje humano) son iguales a los escritos...
			permisos=$(stat -c %A $path/$file)
			if [[ "$permisos" == *"$criterioselec"* ]]; then
				arrayFicheros+=($file)
			fi
			;;
		-c)
			##Si se encuentra la cadena (usando grep -s para eliminar advertencias) ejecuta una acción
			if [[ $(grep -s $criterioselec < $path/$file) ]]; then
				arrayFicheros+=($file)
			fi
			;;		
	esac
done
DoAction
